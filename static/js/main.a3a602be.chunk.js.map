{"version":3,"sources":["components/reducers/todo.reducer.js","context/todo.context.js","components/reducers/localstorage.reducer.js","components/hooks/useToggleState.component.jsx","components/hooks/useInputState.component.jsx","components/EditTodoform.component.jsx","context/theme.context.js","components/Todo.component.jsx","components/TodoList.component.jsx","components/TodoForm.component.jsx","styles/navbar.style.jsx","styles/sizes.js","components/TodoApp.component.jsx","serviceWorker.js","index.js","App.js"],"names":["state","action","type","id","sort","a","b","unshift","task","completed","filter","todo","map","TodosContext","createContext","DispatchContext","TodosProvider","props","key","defaultValue","reducer","useReducer","val","JSON","parse","window","localStorage","getItem","String","error","dispatch","useEffect","setItem","stringify","useLocalStorageReducer","todoReducer","todos","Provider","value","children","useState","setState","initialValue","setValue","e","target","toggleEditForm","React","useContext","useInputState","handleChange","reset","onSubmit","preventDefault","handleSubmit","style","marginLeft","width","TextField","onChange","fullWidth","margin","autoFocus","ThemeContext","ThemeProvider","useToggleState","toggle","switchmode","switchChange","memo","isEditing","ListItem","height","Checkbox","color","tabIndex","checked","onClick","ListItemText","textDecoration","ListItemSecondaryAction","IconButton","aria-label","length","Paper","List","i","Divider","padding","label","Root","styled","Title","Typography","xs","sm","md","lg","elevation","AppBar","position","Toolbar","variant","Switch","Grid","container","justify","marginTop","item","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3a602be.chunk.js","sourcesContent":["export default (state, action) => {\r\n  const createId = () => {\r\n    return state.sort((a, b) => a.id - b.id).unshift() + 1;\r\n  };\r\n\r\n  switch (action.type) {\r\n    case \"ADD\":\r\n      return [\r\n        ...state,\r\n        { id: createId(), task: action.task, completed: false }\r\n      ];\r\n    case \"REMOVE\":\r\n      return state.filter(todo => todo.id !== action.id);\r\n    case \"TOGGLE\":\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\r\n      );\r\n    case \"EDIT\":\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, task: action.task } : todo\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext } from \"react\";\r\n//import useTodostate from \"../components/hooks/useTodoState.component\";\r\nimport todoReducer from \"../components/reducers/todo.reducer\";\r\nimport useLocalStorageReducer from \"../components/reducers/localstorage.reducer\";\r\nexport const TodosContext = createContext();\r\nexport const DispatchContext = createContext();\r\n\r\nexport const TodosProvider = props => {\r\n  //const todoStuff = useTodostate([]);\r\n  const [todos, dispatch] = useLocalStorageReducer(\"todos\", [], todoReducer);\r\n  return (\r\n    <TodosContext.Provider value={todos}>\r\n      <DispatchContext.Provider value={dispatch}>\r\n        {props.children}\r\n      </DispatchContext.Provider>\r\n    </TodosContext.Provider>\r\n  );\r\n};\r\n","import { useReducer, useEffect } from \"react\";\r\n\r\nexport default (key, defaultValue, reducer) => {\r\n  const [state, dispatch] = useReducer(reducer, defaultValue, () => {\r\n    let val;\r\n    try {\r\n      val = JSON.parse(\r\n        window.localStorage.getItem(key) || String(defaultValue)\r\n      );\r\n    } catch (error) {\r\n      val = defaultValue;\r\n    }\r\n    return val;\r\n  });\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(localStorage));\r\n  }, [state, key]);\r\n\r\n  return [state, dispatch];\r\n};\r\n","import { useState } from \"react\";\r\nexport default () => {\r\n  const [state, setState] = useState(false);\r\n  const toggle = () => {\r\n    setState(!state);\r\n  };\r\n\r\n  return [state, toggle];\r\n};\r\n","import { useState } from \"react\";\r\n\r\nexport default initialValue => {\r\n  const [value, setValue] = useState(initialValue);\r\n  const handleChange = e => {\r\n    setValue(e.target.value);\r\n  };\r\n  const reset = () => {\r\n    setValue(\"\");\r\n  };\r\n\r\n  return [value, handleChange, reset];\r\n};\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport useInputState from \"./hooks/useInputState.component\";\r\nimport { DispatchContext } from \"../context/todo.context\";\r\n\r\nexport default ({ todo, toggleEditForm }) => {\r\n  const dispatch = React.useContext(DispatchContext);\r\n  const [value, handleChange, reset] = useInputState(todo.task);\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    todo.task = value;\r\n    dispatch({ type: \"EDIT\", id: todo.id, task: todo.task });\r\n    reset();\r\n    toggleEditForm();\r\n  };\r\n\r\n  return (\r\n    <form\r\n      onSubmit={e => handleSubmit(e)}\r\n      style={{ marginLeft: \"1rem\", width: \"100%\" }}\r\n    >\r\n      <TextField\r\n        value={value}\r\n        onChange={handleChange}\r\n        fullWidth\r\n        margin=\"normal\"\r\n        autoFocus\r\n      />\r\n    </form>\r\n  );\r\n};\r\n","import React, { createContext } from \"react\";\r\nimport useToggleState from \"../components/hooks/useToggleState.component\";\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [state, toggle] = useToggleState(false);\r\n  return (\r\n    <ThemeContext.Provider\r\n      value={{ switchmode: state, switchChange: () => toggle() }}\r\n    >\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext, memo } from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport useToggleState from \"./hooks/useToggleState.component\";\r\nimport EditTodoform from \"./EditTodoform.component\";\r\nimport { ThemeContext } from \"../context/theme.context\";\r\nimport { DispatchContext } from \"../context/todo.context\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\n\r\nexport default memo(({ todo }) => {\r\n  const dispatch = useContext(DispatchContext);\r\n  const { switchmode } = useContext(ThemeContext);\r\n  const [isEditing, toggle] = useToggleState(false);\r\n  return (\r\n    <ListItem style={{ height: \"64px\" }}>\r\n      {isEditing ? (\r\n        <EditTodoform todo={todo} toggleEditForm={toggle} />\r\n      ) : (\r\n        <>\r\n          <Checkbox\r\n            color={switchmode ? \"secondary\" : \"primary\"}\r\n            tabIndex={-1}\r\n            checked={todo.completed}\r\n            onClick={() => dispatch({ type: \"TOGGLE\", id: todo.id })}\r\n          />\r\n          <ListItemText\r\n            style={{ textDecoration: todo.completed ? \"Line-through\" : \"none\" }}\r\n          >\r\n            {todo.task}\r\n          </ListItemText>\r\n          <ListItemSecondaryAction>\r\n            <IconButton\r\n              aria-label=\"Delete\"\r\n              onClick={() => dispatch({ type: \"REMOVE\", id: todo.id })}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n            <IconButton aria-label=\"Edit\" onClick={toggle}>\r\n              <EditIcon />\r\n            </IconButton>\r\n          </ListItemSecondaryAction>\r\n        </>\r\n      )}\r\n    </ListItem>\r\n  );\r\n});\r\n","import React, { Fragment } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { TodosContext } from \"../context/todo.context\";\r\nimport Todo from \"./Todo.component\";\r\nexport default () => {\r\n  const todos = React.useContext(TodosContext)\r\n  if (todos.length > 0) {\r\n    return (\r\n      <Paper>\r\n        <List>\r\n          {todos.map((todo, i) => (\r\n            <Fragment key={todo.id}>\r\n              <Todo todo={todo} key={todo.id} />\r\n              {i < todo.length - 1 && <Divider />}\r\n            </Fragment>\r\n          ))}\r\n        </List>\r\n      </Paper>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport useInputState from \"./hooks/useInputState.component\";\r\nimport { DispatchContext } from \"../context/todo.context\";\r\nexport default () => {\r\n  const  dispatch  = React.useContext(DispatchContext);\r\n  const [value, handleChange, reset] = useInputState(\"\");\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch({ type: \"ADD\", task: value });\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <Paper style={{ margin: \"1rem 0\", padding: \"0 1rem\" }}>\r\n      <form onSubmit={e => handleSubmit(e)}>\r\n        <TextField\r\n          value={value}\r\n          onChange={handleChange}\r\n          margin=\"normal\"\r\n          label=\"Add New Todo\"\r\n          fullWidth\r\n        />\r\n      </form>\r\n    </Paper>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport sizes from \"./sizes\";\r\n\r\nexport const Root = styled(Paper)`\r\n  width: 100%;\r\n  margin-bottom: 0;\r\n  padding: 0;\r\n  margin: 0;\r\n  height: 100vh;\r\n  && {\r\n    background-color: ${props => (props.switchmode ? \"grey\" : \"white\")};\r\n  }\r\n`;\r\n\r\nexport const Title = styled(Typography)`\r\n  display: block;\r\n  ${sizes.down(\"sm\")} {\r\n    display: none;\r\n  }\r\n`;\r\n","export default{\r\n    up(){\r\n\r\n    },\r\n    down(size){\r\n        const sizes = {\r\n            xs:'576px',\r\n            sm:'768px',\r\n            md:'992px',\r\n            lg:'1200px'\r\n        }\r\n        return `@media (max-width:${sizes[size]})`\r\n    }\r\n}","import React, { useContext } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TodoList from \"./TodoList.component\";\r\nimport TodoForm from \"./TodoForm.component\";\r\nimport { Root, Title } from \"../styles/navbar.style\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport { ThemeContext } from \"../context/theme.context\";\r\n\r\nexport default () => {\r\n  const { switchmode, switchChange } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <Root elevation={0} switchmode={switchmode}>\r\n      <AppBar\r\n        color={switchmode ? \"default\" : \"primary\"}\r\n        position=\"static\"\r\n        style={{ height: \"64px\" }}\r\n      >\r\n        <Toolbar>\r\n          <Title color=\"inherit\" variant=\"h6\">\r\n            TODO WITH HOOKS\r\n          </Title>\r\n          <Switch onClick={() => switchChange()} />\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Grid container justify=\"center\" style={{ marginTop: \"1rem\" }}>\r\n        <Grid item xs={11} md={8} lg={4}>\r\n          <TodoForm />\r\n          <TodoList />\r\n        </Grid>\r\n      </Grid>\r\n    </Root>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\r\nimport TodoApp from \"./components/TodoApp.component\";\r\nimport \"./App.css\";\r\nimport { ThemeProvider } from \"./context/theme.context\";\r\nimport { TodosProvider } from \"./context/todo.context\";\r\nexport default () => {\r\n  return (\r\n    <ThemeProvider>\r\n      <TodosProvider>\r\n        <TodoApp />\r\n      </TodosProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n"],"sourceRoot":""}