{"version":3,"sources":["components/hooks/useInputState.component.jsx","components/EditTodoform.component.jsx","components/Todo.component.jsx","components/hooks/useToggleState.component.jsx","components/TodoList.component.jsx","components/TodoForm.component.jsx","components/hooks/useTodoState.component.jsx","components/hooks/useLocalStorageState.component.jsx","components/TodoApp.component.jsx","serviceWorker.js","index.js","App.js"],"names":["initialValue","useState","value","setValue","e","target","todo","editTodo","toggleEditForm","useInputState","task","handleChange","reset","onSubmit","preventDefault","handleSubmit","style","marginLeft","width","TextField","onChange","fullWidth","margin","autoFocus","removeTodo","toggleTodo","state","setState","toggle","useToggleState","isEditing","ListItem","height","Checkbox","tabIndex","checked","completed","onClick","id","ListItemText","textDecoration","ListItemSecondaryAction","IconButton","aria-label","todos","length","Paper","List","map","i","key","Divider","addTodo","padding","label","defaultValue","val","JSON","parse","window","localStorage","getItem","String","error","setLocalStorage","useEffect","setItem","stringify","useLocalStorage","setTodos","newTodo","sort","a","b","unshift","todoId","filter","useTodoState","backgroundColor","elevation","AppBar","color","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50201eeb.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nexport default initialValue => {\r\n  const [value, setValue] = useState(initialValue);\r\n  const handleChange = e => {\r\n    setValue(e.target.value);\r\n  };\r\n  const reset = () => {\r\n    setValue(\"\");\r\n  };\r\n\r\n  return [value, handleChange, reset];\r\n};\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport useInputState from \"./hooks/useInputState.component\";\r\n\r\nexport default ({ todo, editTodo, toggleEditForm }) => {\r\n  const [value, handleChange, reset] = useInputState(todo.task);\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    todo.task = value;\r\n    editTodo(todo);\r\n    reset();\r\n    toggleEditForm();\r\n  };\r\n\r\n  return (\r\n    <form\r\n      onSubmit={e => handleSubmit(e)}\r\n      style={{ marginLeft: \"1rem\", width: \"100%\" }}\r\n    >\r\n      <TextField\r\n        value={value}\r\n        onChange={handleChange}\r\n        fullWidth\r\n        margin=\"normal\"\r\n        autoFocus\r\n      />\r\n    </form>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport useToggleState from \"./hooks/useToggleState.component\";\r\nimport EditTodoform from \"./EditTodoform.component\";\r\n\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\n\r\nexport default ({ todo, removeTodo, toggleTodo, editTodo }) => {\r\n  const [isEditing, toggle] = useToggleState(false);\r\n  return (\r\n    <ListItem style={{ height: \"64px\" }}>\r\n      {isEditing ? (\r\n        <EditTodoform editTodo={editTodo} todo={todo} toggleEditForm={toggle} />\r\n      ) : (\r\n        <>\r\n          <Checkbox\r\n            tabIndex={-1}\r\n            checked={todo.completed}\r\n            onClick={() => toggleTodo(todo.id)}\r\n          />\r\n          <ListItemText\r\n            style={{ textDecoration: todo.completed ? \"Line-through\" : \"none\" }}\r\n          >\r\n            {todo.task}\r\n          </ListItemText>\r\n          <ListItemSecondaryAction>\r\n            <IconButton aria-label=\"Delete\" onClick={() => removeTodo(todo.id)}>\r\n              <DeleteIcon />\r\n            </IconButton>\r\n            <IconButton aria-label=\"Edit\" onClick={toggle}>\r\n              <EditIcon />\r\n            </IconButton>\r\n          </ListItemSecondaryAction>\r\n        </>\r\n      )}\r\n    </ListItem>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\nexport default (initialValue = false) => {\r\n  const [state, setState] = useState(initialValue);\r\n  const toggle = () => {\r\n    setState(!state);\r\n  };\r\n\r\n  return [state, toggle];\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nimport Todo from \"./Todo.component\";\r\nexport default ({ todos, removeTodo, toggleTodo, editTodo }) => {\r\n  if (todos.length > 0) {\r\n    return (\r\n      <Paper>\r\n        <List>\r\n          {todos.map((todo, i) => (\r\n            <Fragment key={todo.id}>\r\n              <Todo\r\n                todo={todo}\r\n                key={todo.id}\r\n                removeTodo={removeTodo}\r\n                toggleTodo={toggleTodo}\r\n                editTodo={editTodo}\r\n              />\r\n              {i < todo.length - 1 && <Divider />}\r\n            </Fragment>\r\n          ))}\r\n        </List>\r\n      </Paper>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport useInputState from \"./hooks/useInputState.component\";\r\nexport default ({ addTodo }) => {\r\n  const [value, handleChange, reset] = useInputState(\"\");\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    addTodo(value);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <Paper style={{ margin: \"1rem 0\", padding: \"0 1rem\" }}>\r\n      <form onSubmit={e => handleSubmit(e)}>\r\n        <TextField\r\n          value={value}\r\n          onChange={handleChange}\r\n          margin=\"normal\"\r\n          label=\"Add New Todo\"\r\n          fullWidth\r\n        />\r\n      </form>\r\n    </Paper>\r\n  );\r\n};\r\n","import useLocalStorage from \"./useLocalStorageState.component\";\r\nexport default () => {\r\n  const [todos, setTodos] = useLocalStorage(\"todos\", []);\r\n\r\n  const createId = () => {\r\n    return todos.sort((a, b) => a - b).unshift() + 1;\r\n  };\r\n\r\n  return {\r\n    todos,\r\n    addTodo: newTodo => {\r\n      setTodos([...todos, { id: createId(), task: newTodo, completed: false }]);\r\n    },\r\n    removeTodo: todoId => {\r\n      setTodos(todos.filter(todo => todo.id !== todoId));\r\n    },\r\n    toggleTodo: todoId => {\r\n      setTodos(\r\n        todos.map(todo =>\r\n          todo.id === todoId ? { ...todo, completed: !todo.completed } : todo\r\n        )\r\n      );\r\n    },\r\n    editTodo: ({ task, id }) => {\r\n      setTodos(todos.map(todo => (todo.id === id ? { ...todo, task } : todo)));\r\n    }\r\n  };\r\n};\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport default (key, defaultValue) => {\r\n  const [localStorage, setLocalStorage] = useState(() => {\r\n    let val;\r\n    try {\r\n      val = JSON.parse(\r\n        window.localStorage.getItem(key) || String(defaultValue)\r\n      );\r\n    } catch (error) {\r\n      val = defaultValue;\r\n    }\r\n    return val;\r\n  });\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(localStorage));\r\n  }, [key, localStorage]);\r\n\r\n  return [localStorage, setLocalStorage];\r\n};\r\n","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TodoList from \"./TodoList.component\";\r\nimport TodoForm from \"./TodoForm.component\";\r\nimport useTodoState from \"./hooks/useTodoState.component\";\r\n\r\nexport default () => {\r\n  const { todos, addTodo, removeTodo, toggleTodo, editTodo } = useTodoState();\r\n\r\n\r\n  return (\r\n    <Paper\r\n      style={{\r\n        padding: 0,\r\n        margin: 0,\r\n        height: \"100vh\",\r\n        backgroundColor: \"#fafafa\"\r\n      }}\r\n      elevation={0}\r\n    >\r\n      <AppBar color=\"primary\" position=\"static\" style={{ height: \"64px\" }}>\r\n        <Toolbar>\r\n          <Typography color=\"inherit\">TODO WITH HOOKS</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Grid container justify=\"center\" style={{ marginTop: \"1rem\" }}>\r\n        <Grid item xs={11} md={8} lg={4}>\r\n          <TodoForm addTodo={addTodo} />\r\n          <TodoList\r\n            todos={todos}\r\n            removeTodo={removeTodo}\r\n            toggleTodo={toggleTodo}\r\n            editTodo={editTodo}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport TodoApp from \"./components/TodoApp.component\";\nimport \"./App.css\";\n\nexport default () => {\n  return <TodoApp />;\n};\n"],"sourceRoot":""}