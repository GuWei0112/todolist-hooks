{"version":3,"sources":["components/hooks/useTodoState.component.jsx","components/hooks/useLocalStorageState.component.jsx","context/todo.context.js","components/hooks/useToggleState.component.jsx","components/hooks/useInputState.component.jsx","components/EditTodoform.component.jsx","context/theme.context.js","components/Todo.component.jsx","components/TodoList.component.jsx","components/TodoForm.component.jsx","styles/navbar.style.jsx","styles/sizes.js","components/TodoApp.component.jsx","serviceWorker.js","index.js","App.js"],"names":["key","defaultValue","useState","val","JSON","parse","window","localStorage","getItem","String","error","setLocalStorage","useEffect","setItem","stringify","useLocalStorage","todos","setTodos","addTodo","newTodo","id","sort","a","b","unshift","task","completed","removeTodo","todoId","filter","todo","toggleTodo","map","editTodo","TodosContext","createContext","TodosProvider","props","todoStuff","useTodostate","Provider","value","children","initialValue","state","setState","toggle","setValue","e","target","toggleEditForm","React","useContext","useInputState","handleChange","reset","onSubmit","preventDefault","handleSubmit","style","marginLeft","width","TextField","onChange","fullWidth","margin","autoFocus","ThemeContext","ThemeProvider","useToggleState","switchmode","switchChange","isEditing","ListItem","height","Checkbox","color","tabIndex","checked","onClick","ListItemText","textDecoration","ListItemSecondaryAction","IconButton","aria-label","length","Paper","List","i","Divider","padding","label","Root","styled","Title","Typography","xs","sm","md","lg","elevation","AppBar","position","Toolbar","variant","Switch","Grid","container","justify","marginTop","item","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3143bd7.chunk.js","sourcesContent":["import useLocalStorage from \"./useLocalStorageState.component\";\r\nexport default () => {\r\n  const [todos, setTodos] = useLocalStorage(\"todos\", []);\r\n\r\n  const createId = () => {\r\n    return todos.sort((a, b) => a - b).unshift() + 1;\r\n  };\r\n\r\n  return {\r\n    todos,\r\n    addTodo: newTodo => {\r\n      setTodos([...todos, { id: createId(), task: newTodo, completed: false }]);\r\n    },\r\n    removeTodo: todoId => {\r\n      setTodos(todos.filter(todo => todo.id !== todoId));\r\n    },\r\n    toggleTodo: todoId => {\r\n      setTodos(\r\n        todos.map(todo =>\r\n          todo.id === todoId ? { ...todo, completed: !todo.completed } : todo\r\n        )\r\n      );\r\n    },\r\n    editTodo: ({ task, id }) => {\r\n      setTodos(todos.map(todo => (todo.id === id ? { ...todo, task } : todo)));\r\n    }\r\n  };\r\n};\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport default (key, defaultValue) => {\r\n  const [localStorage, setLocalStorage] = useState(() => {\r\n    let val;\r\n    try {\r\n      val = JSON.parse(\r\n        window.localStorage.getItem(key) || String(defaultValue)\r\n      );\r\n    } catch (error) {\r\n      val = defaultValue;\r\n    }\r\n    return val;\r\n  });\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(localStorage));\r\n  }, [key, localStorage]);\r\n\r\n  return [localStorage, setLocalStorage];\r\n};\r\n","import React, { createContext } from \"react\";\r\nimport useTodostate from \"../components/hooks/useTodoState.component\";\r\nexport const TodosContext = createContext();\r\n\r\nexport const TodosProvider = props => {\r\n  const todoStuff = useTodostate([]);\r\n\r\n  return (\r\n    <TodosContext.Provider value={todoStuff}>\r\n      {props.children}\r\n    </TodosContext.Provider>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\nexport default (initialValue = false) => {\r\n  const [state, setState] = useState(initialValue);\r\n  const toggle = () => {\r\n    setState(!state);\r\n  };\r\n\r\n  return [state, toggle];\r\n};\r\n","import { useState } from \"react\";\r\n\r\nexport default initialValue => {\r\n  const [value, setValue] = useState(initialValue);\r\n  const handleChange = e => {\r\n    setValue(e.target.value);\r\n  };\r\n  const reset = () => {\r\n    setValue(\"\");\r\n  };\r\n\r\n  return [value, handleChange, reset];\r\n};\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport useInputState from \"./hooks/useInputState.component\";\r\nimport { TodosContext } from \"../context/todo.context\";\r\n\r\nexport default ({ todo, toggleEditForm }) => {\r\n  const { editTodo } = React.useContext(TodosContext);\r\n  const [value, handleChange, reset] = useInputState(todo.task);\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    todo.task = value;\r\n    editTodo(todo);\r\n    reset();\r\n    toggleEditForm();\r\n  };\r\n\r\n  return (\r\n    <form\r\n      onSubmit={e => handleSubmit(e)}\r\n      style={{ marginLeft: \"1rem\", width: \"100%\" }}\r\n    >\r\n      <TextField\r\n        value={value}\r\n        onChange={handleChange}\r\n        fullWidth\r\n        margin=\"normal\"\r\n        autoFocus\r\n      />\r\n    </form>\r\n  );\r\n};\r\n","import React, { createContext } from \"react\";\r\nimport useToggleState from \"../components/hooks/useToggleState.component\";\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [state, toggle] = useToggleState(false);\r\n  return (\r\n    <ThemeContext.Provider\r\n      value={{ switchmode: state, switchChange: () => toggle() }}\r\n    >\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport useToggleState from \"./hooks/useToggleState.component\";\r\nimport EditTodoform from \"./EditTodoform.component\";\r\nimport { ThemeContext } from \"../context/theme.context\";\r\nimport { TodosContext } from \"../context/todo.context\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\n\r\nexport default ({ todo }) => {\r\n  const { removeTodo, toggleTodo, editTodo } = useContext(TodosContext);\r\n  const { switchmode } = useContext(ThemeContext);\r\n  const [isEditing, toggle] = useToggleState(false);\r\n  return (\r\n    <ListItem style={{ height: \"64px\" }}>\r\n      {isEditing ? (\r\n        <EditTodoform editTodo={editTodo} todo={todo} toggleEditForm={toggle} />\r\n      ) : (\r\n        <>\r\n          <Checkbox\r\n            color={switchmode ? \"secondary\" : \"primary\"}\r\n            tabIndex={-1}\r\n            checked={todo.completed}\r\n            onClick={() => toggleTodo(todo.id)}\r\n          />\r\n          <ListItemText\r\n            style={{ textDecoration: todo.completed ? \"Line-through\" : \"none\" }}\r\n          >\r\n            {todo.task}\r\n          </ListItemText>\r\n          <ListItemSecondaryAction>\r\n            <IconButton aria-label=\"Delete\" onClick={() => removeTodo(todo.id)}>\r\n              <DeleteIcon />\r\n            </IconButton>\r\n            <IconButton aria-label=\"Edit\" onClick={toggle}>\r\n              <EditIcon />\r\n            </IconButton>\r\n          </ListItemSecondaryAction>\r\n        </>\r\n      )}\r\n    </ListItem>\r\n  );\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { TodosContext } from \"../context/todo.context\";\r\nimport Todo from \"./Todo.component\";\r\nexport default () => {\r\n  const {todos} = React.useContext(TodosContext)\r\n  if (todos.length > 0) {\r\n    return (\r\n      <Paper>\r\n        <List>\r\n          {todos.map((todo, i) => (\r\n            <Fragment key={todo.id}>\r\n              <Todo todo={todo} key={todo.id} />\r\n              {i < todo.length - 1 && <Divider />}\r\n            </Fragment>\r\n          ))}\r\n        </List>\r\n      </Paper>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport useInputState from \"./hooks/useInputState.component\";\r\nimport { TodosContext } from \"../context/todo.context\";\r\nexport default () => {\r\n  const { addTodo } = React.useContext(TodosContext);\r\n  const [value, handleChange, reset] = useInputState(\"\");\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    addTodo(value);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <Paper style={{ margin: \"1rem 0\", padding: \"0 1rem\" }}>\r\n      <form onSubmit={e => handleSubmit(e)}>\r\n        <TextField\r\n          value={value}\r\n          onChange={handleChange}\r\n          margin=\"normal\"\r\n          label=\"Add New Todo\"\r\n          fullWidth\r\n        />\r\n      </form>\r\n    </Paper>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport sizes from \"./sizes\";\r\n\r\nexport const Root = styled(Paper)`\r\n  width: 100%;\r\n  margin-bottom: 0;\r\n  padding: 0;\r\n  margin: 0;\r\n  height: 100vh;\r\n  && {\r\n    background-color: ${props => (props.switchmode ? \"grey\" : \"white\")};\r\n  }\r\n`;\r\n\r\nexport const Title = styled(Typography)`\r\n  display: block;\r\n  ${sizes.down(\"sm\")} {\r\n    display: none;\r\n  }\r\n`;\r\n","export default{\r\n    up(){\r\n\r\n    },\r\n    down(size){\r\n        const sizes = {\r\n            xs:'576px',\r\n            sm:'768px',\r\n            md:'992px',\r\n            lg:'1200px'\r\n        }\r\n        return `@media (max-width:${sizes[size]})`\r\n    }\r\n}","import React, { useContext } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TodoList from \"./TodoList.component\";\r\nimport TodoForm from \"./TodoForm.component\";\r\nimport { Root, Title } from \"../styles/navbar.style\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport { ThemeContext } from \"../context/theme.context\";\r\n\r\nexport default () => {\r\n  const { switchmode, switchChange } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <Root elevation={0} switchmode={switchmode}>\r\n      <AppBar\r\n        color={switchmode ? \"default\" : \"primary\"}\r\n        position=\"static\"\r\n        style={{ height: \"64px\" }}\r\n      >\r\n        <Toolbar>\r\n          <Title color=\"inherit\" variant=\"h6\">\r\n            TODO WITH HOOKS\r\n          </Title>\r\n          <Switch onClick={() => switchChange()} />\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Grid container justify=\"center\" style={{ marginTop: \"1rem\" }}>\r\n        <Grid item xs={11} md={8} lg={4}>\r\n          <TodoForm />\r\n          <TodoList />\r\n        </Grid>\r\n      </Grid>\r\n    </Root>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\r\nimport TodoApp from \"./components/TodoApp.component\";\r\nimport \"./App.css\";\r\nimport { ThemeProvider } from \"./context/theme.context\";\r\nimport { TodosProvider } from \"./context/todo.context\";\r\nexport default () => {\r\n  return (\r\n    <ThemeProvider>\r\n      <TodosProvider>\r\n        <TodoApp />\r\n      </TodosProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n"],"sourceRoot":""}